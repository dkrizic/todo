/*
 * Todo API
 *
 * A simple Todo API
 *
 * API version: 1.0.0
 * Contact: darko@krizic.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package todo

type Todo struct {

	// Unique identifier for the todo
	Id string `json:"id"`

	// Name of the todo
	Name string `json:"name"`

	// Description of the todo
	Description string `json:"description"`

	Status TodoStatus `json:"status"`
}

// AssertTodoRequired checks if the required fields are not zero-ed
func AssertTodoRequired(obj Todo) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"description": obj.Description,
		"status": obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTodoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Todo (e.g. [][]Todo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTodoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTodo, ok := obj.(Todo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTodoRequired(aTodo)
	})
}
