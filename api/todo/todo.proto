syntax = "proto3";
package api;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/dkrizic/todo";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Notes";
    version: "1.0";
    contact: {
      name: "todos";
      url: "https://github.com/dkrizic/todo";
      email: "darko@krizic.net";
    };
    license: {
      name: "BSD 3-Clause License";
      url: "https://github.com/dkrizic/todo/LICENSE.md";
    };
  };

  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

message ToDo {
  string id = 1;
  string title = 2;
  string description = 3;
  google.protobuf.Timestamp reminder = 4;
  enum status {
    TODO = 0;
    IN_PROGRESS = 1;
    COMPLETED = 2;
  }
}

message CreateOrUpdateRequest {
  string api = 1;
  ToDo todo = 2;
}

message CreateOrUpdateResponse {
  string api = 1;
  ToDo todo = 2;
}

message GetAllRequest {
  string api = 1;
}

message GetAllResponse {
  string api = 1;
  repeated ToDo todos = 2;
}

message GetRequest {
  string api = 1;
  string id = 2;
}

message GetResponse {
  string api = 1;
  ToDo todo = 2;
}

message DeleteRequest {
  string api = 1;
  string id = 2;
}

message DeleteResponse {
  string api = 1;
  string id = 2;
}

message Change {
  string api = 1;
  ToDo before = 2;
  ToDo after = 3;
}

service ToDoService {
  rpc Create(CreateOrUpdateRequest) returns (CreateOrUpdateResponse) {
    option (google.api.http) = {
      post: "/api/v1/todos"
      body: "*"
    };
  }

  rpc Update(CreateOrUpdateRequest) returns (CreateOrUpdateResponse) {
    option (google.api.http) = {
      put: "/api/v1/todos/{todo.id}"
      body: "*"
    };
  }
  rpc GetAll(GetAllRequest) returns (GetAllResponse) {
    option (google.api.http) = {
      get: "/api/v1/todos"
    };
  }

  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/api/v1/todos/{id}"
    };
  }

  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/v1/todos/{id}"
    };
  };
}
