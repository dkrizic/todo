on:
  push:
    branches:
      - main
    pull_request:
      branches:
        - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Set the version to tag if it exists otherweise take the commit short hash
      - name: Set version
        id: version
        run: |
          if [[ -n "${GITHUB_REF##*/}" ]]; then
              echo "version=${GITHUB_REF##*/}" >>$GITHUB_OUTPUT
          else
              echo "version=${GITHUB_SHA::7}" >>$GITHUB_OUTPUT
          fi
      - name: Print version
        run: echo ${{ steps.version.outputs.version }}

  ci-todo-amd64:
    runs-on: ubuntu-latest
    needs: version
    steps:
      # checkout code
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build docker image
      - name: Build docker image
        run:  docker build -t ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-amd64:latest -f server/docker/Dockerfile --build-arg ARCH=amd64 .

      - name: Push docker image
        run: docker push ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-amd64:latest

  ci-todo-arm64:
    runs-on: ubuntu-latest
    needs: version
    steps:
      # checkout code
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build docker image
      - name: Build docker image
        run:  docker build -t ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-arm64:latest -f server/docker/Dockerfile --build-arg ARCH=arm64 .

      - name: Push docker image
        run: docker push ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-arm64:latest

  ci-todo-multiarch:
    runs-on: ubuntu-latest
    needs: [ci-todo-amd64, ci-todo-arm64]
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multiarch manifest
        run: |
          docker manifest create ${{ env.REGISTRY}}/${{ github.actor }}/todo-server:latest ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-amd64:latest ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-arm64:latest
          docker manifest annotate ${{ env.REGISTRY}}/${{ github.actor }}/todo-server:latest ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-arm64:latest --os linux --arch arm64
          docker manifest annotate ${{ env.REGISTRY}}/${{ github.actor }}/todo-server:latest ${{ env.REGISTRY}}/${{ github.actor }}/todo-server-amd64:latest --os linux --arch amd64

      - name: Push multiarch manifest
        run: docker manifest push ${{ env.REGISTRY}}/${{ github.actor }}/todo-server:latest

  ci-echo-amd64:
    runs-on: ubuntu-latest
    needs: version
    steps:
      # checkout code
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build docker image
      - name: Build docker image
        run:  docker build -t ${{ env.REGISTRY}}/${{ github.actor }}/echo-amd64:latest -f echo/docker/Dockerfile --build-arg ARCH=amd64 .

      - name: Push docker image
        run: docker push ${{ env.REGISTRY}}/${{ github.actor }}/echo-amd64:latest

  ci-echo-arm64:
    runs-on: ubuntu-latest
    needs: version
    steps:
      # checkout code
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build docker image
      - name: Build docker image
        run:  docker build -t ${{ env.REGISTRY}}/${{ github.actor }}/echo-arm64:latest -f echo/docker/Dockerfile --build-arg ARCH=arm64 .

      - name: Push docker image
        run: docker push ${{ env.REGISTRY}}/${{ github.actor }}/echo-arm64:latest

  ci-echo-multiarch:
    runs-on: ubuntu-latest
    needs: [ci-echo-amd64, ci-echo-arm64]
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multiarch manifest
        run: |
          docker manifest create ${{ env.REGISTRY}}/${{ github.actor }}/echo:latest ${{ env.REGISTRY}}/${{ github.actor }}/echo-amd64:latest ${{ env.REGISTRY}}/${{ github.actor }}/echo-arm64:latest
          docker manifest annotate ${{ env.REGISTRY}}/${{ github.actor }}/echo:latest ${{ env.REGISTRY}}/${{ github.actor }}/echo-arm64:latest --os linux --arch arm64
          docker manifest annotate ${{ env.REGISTRY}}/${{ github.actor }}/echo:latest ${{ env.REGISTRY}}/${{ github.actor }}/echo-amd64:latest --os linux --arch amd64

      - name: Push multiarch manifest
        run: docker manifest push ${{ env.REGISTRY}}/${{ github.actor }}/echo:latest